demo()
help()
topi <- "women"
help(topi)
demo()
x <- 5
x <- x + 1
x <- sqrt(x)
x<-c(1, 2, 3, 4, 5, 6)
x<-c(1, 2, 3, 4, 5, 6)
mean(c)
x<-mean(c)
x<-mean(theData)
x<-mean(thedata)
thedata <- c(1, 2, 3, 4, 5, 6)
x <- mean(thedata)
x = sd(thedata)
x = hist(thedata)
x = hist(thedata)
?mpg
library(dplyr)
source("~/Desktop/FIT3152-assignment2/assignment2.R", echo=TRUE)
################################### Libraries ###############################
library(janitor)
library(tidyr)
library(data.table)
library(ggplot2)
library(reshape2)
library(dplyr)
library(lubridate)
library(plotly)
library(GGally)
library(tree)
library(e1071)
package.install("e1071")
package.install(e1071)
install.packages("e1071")
library(e1071)
library(ROCR)
install.packages("ROCR")
library(ROCR)
library(randomForest)
install.packages("randomForest")
library(randomForest)
install.packages("adabag")
library(adabag)
install.packages("rpart")
library(rpart)
install.packages("neuralnet")
# installing/loading the latest installr package:
install.packages("installr"); library(installr)
# install+load installr
updateR() # updating R.
library(quantmod);
names(ECO)
ECO <- read.delim("~/Downloads/ECO.txt")
View(ECO)
library(rugarch);
library(sos);
library(forecast);
install.packages("rugarch", "sos", "forecast", "quantmod", "fBasics");
#install.packages("rugarch", "forecast", "quantmod", "fBasics");
library(rugarch);
library(sos);
library(forecast);
library(quantmod);
require(fBasics);
names(ECO);
attach(ECO)
set.seed(125088)
rets = 100*diff(log(Price)) # Compute the log return
rets = as.ts(rets)
plot(rets, col="blue")
length(rets)
rets
#loop
set.seed(125088)
# load the forecast package as it has auto.arima command
all_smpl = length(rets)
# rets are the log-returns computed from the Bitcoin prices
fixed.smpl = 4485
# for this case a fixed window size is 514
R = all_smpl - fixed.smpl
# R is the number of optimal ARIMA models to be estimated
step = 1L
# the step is one day
arima.fit = list()
for (i in 1:1000) {
arima.fit[[i]] <- auto.arima(rets[(i-step+1):(fixed.smpl+i-step)], ic=c("aicc"),
max.p=3, max.q=3,stepwise = FALSE,allowmean=TRUE)
}
# streamgraph
unemployment_count <- read.csv("unemployment-count.csv")
################################### Libraries ###############################
library(janitor)
library(tidyr)
library(data.table)
library(dplyr)
library(lubridate)
library("readxl")
#install.packages("readxl")
#install.packages("xlsx")
library("xlsx")
################################### Project Setup ############################
setwd("~/Desktop/FIT3179-Assignment2/Datasets")
rm(list=ls())
gdp_covid_df <- read.csv("gdp_per_capita_us.csv")
unemp_df <- read_excel("unemployment.xls")
gni_df <- read.csv("GNI.csv")
gdp_df <- read.csv("GDP_per_capita.csv")
covid_df <- read.csv("covid-data.csv")
#https://data.worldbank.org/indicator/NY.GDP.PCAP.CD?view=chart
path_to_write <- "~/Desktop/FIT3179-Assignment2/Cleaned_Datasets/"
# streamgraph
unemployment_count <- read.csv("unemployment-count.csv")
# streamgraph
unemployment_count_df <- read.csv("unemployment-count.csv")
unemployment_count_df <- unemployment_count_df %<% na.omit(unemployment_count_df)
unemployment_count_df <- unemployment_count_df %>% na.omit(unemployment_count_df)
View(unemployment_count)
unemployment_count_df$date <- as.POSIXct(unemployment_count_df$date, format = "%m/%d/%Y %H:%M:%S")
format(unemployment_count_df$date, format="%Y")
unemployment_count_df$date <- format(unemployment_count_df$date, format="%Y")
View(unemployment_count_df)
write.csv(unemployment_count_df, paste(path_to_write, "unemployment-count.csv"), row.names = FALSE)
# streamgraph
unemployment_count_df <- read.csv("unemployment-count.csv")
unemployment_count_df <- unemployment_count_df %>% na.omit(unemployment_count_df)
unemployment_count_df$date <- as.POSIXct(unemployment_count_df$date, format = "%m/%d/%Y %H:%M:%S")
View(unemployment_count_df)
unemployment_count_df$date <- format(unemployment_count_df$date, format="%Y-%M")
write.csv(unemployment_count_df, paste(path_to_write, "unemployment-count.csv"), row.names = FALSE)
unemployment_count_df$date <- as.POSIXct(unemployment_count_df$date, format = "%m/%d/%Y %H:%M:%S")
# streamgraph
unemployment_count_df <- read.csv("unemployment-count.csv")
unemployment_count_df <- unemployment_count_df %>% na.omit(unemployment_count_df)
unemployment_count_df$date <- as.POSIXct(unemployment_count_df$date, format = "%m/%d/%Y %H:%M:%S")
unemployment_count_df$date <- format(unemployment_count_df$date, format="%m/%d/%Y")
View(unemployment_count_df)
write.csv(unemployment_count_df, paste(path_to_write, "unemployment-count.csv"), row.names = FALSE)
# required
# - countries G20
# year
# GDP relative change
bump_df <- read_excel("gdp_data.xls")
View(bump_df)
colnames(bump_df)[1] = "country"
bump_df = bump_df %>% filter((bump_df$country == "United States") | (bump_df$country == "China") | (bump_df$country == "India") | (bump_df$country == "United Kingdom") | (bump_df$country == "Germany") | (bump_df$country == "Japan") | (bump_df$country == "France"))
View(gdp_df)
View(gni_df)
View(gdp_covid_df)
View(gdp_covid_df)
View(covid_df)
View(bump_df)
# required
# - countries G20
# year
# GDP relative change
bump_df <- read_excel("gdp_data.xlsx")
View(bump_df)
colnames(bump_df)[1] = "country"
bump_df = bump_df %>% filter((bump_df$country == "United States") | (bump_df$country == "China") | (bump_df$country == "India") | (bump_df$country == "United Kingdom") | (bump_df$country == "Germany") | (bump_df$country == "Japan") | (bump_df$country == "France"))
View(bump_df)
for (i in nrow(bump_df)) {
bump_df$`2010`[i]
}
print(bump_df$`2010`[i])
for (i in nrow(bump_df)) {
print(bump_df$`2010`[i])
}
print(nrow(bump_df))
print(bump_df$"2010"[i])
# required
# - countries G20
# year
# GDP relative change
bump_df <- read_excel("gdp_data.xlsx")
colnames(bump_df)[1] = "country"
bump_df = bump_df %>% filter((bump_df$country == "United States") | (bump_df$country == "China") | (bump_df$country == "India") | (bump_df$country == "United Kingdom") | (bump_df$country == "Germany") | (bump_df$country == "Japan") | (bump_df$country == "France"))
#cols = 11
write.csv(bump_df, paste(path_to_write, "gdp_data.csv"), row.names=FALSE)
