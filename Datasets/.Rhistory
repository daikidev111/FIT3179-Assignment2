demo()
help()
topi <- "women"
help(topi)
demo()
x <- 5
x <- x + 1
x <- sqrt(x)
x<-c(1, 2, 3, 4, 5, 6)
x<-c(1, 2, 3, 4, 5, 6)
mean(c)
x<-mean(c)
x<-mean(theData)
x<-mean(thedata)
thedata <- c(1, 2, 3, 4, 5, 6)
x <- mean(thedata)
x = sd(thedata)
x = hist(thedata)
x = hist(thedata)
?mpg
library(dplyr)
source("~/Desktop/FIT3152-assignment2/assignment2.R", echo=TRUE)
################################### Libraries ###############################
library(janitor)
library(tidyr)
library(data.table)
library(ggplot2)
library(reshape2)
library(dplyr)
library(lubridate)
library(plotly)
library(GGally)
library(tree)
library(e1071)
package.install("e1071")
package.install(e1071)
install.packages("e1071")
library(e1071)
library(ROCR)
install.packages("ROCR")
library(ROCR)
library(randomForest)
install.packages("randomForest")
library(randomForest)
install.packages("adabag")
library(adabag)
install.packages("rpart")
library(rpart)
install.packages("neuralnet")
# installing/loading the latest installr package:
install.packages("installr"); library(installr)
# install+load installr
updateR() # updating R.
library(quantmod);
names(ECO)
ECO <- read.delim("~/Downloads/ECO.txt")
View(ECO)
library(rugarch);
library(sos);
library(forecast);
install.packages("rugarch", "sos", "forecast", "quantmod", "fBasics");
#install.packages("rugarch", "forecast", "quantmod", "fBasics");
library(rugarch);
library(sos);
library(forecast);
library(quantmod);
require(fBasics);
names(ECO);
attach(ECO)
set.seed(125088)
rets = 100*diff(log(Price)) # Compute the log return
rets = as.ts(rets)
plot(rets, col="blue")
length(rets)
rets
#loop
set.seed(125088)
# load the forecast package as it has auto.arima command
all_smpl = length(rets)
# rets are the log-returns computed from the Bitcoin prices
fixed.smpl = 4485
# for this case a fixed window size is 514
R = all_smpl - fixed.smpl
# R is the number of optimal ARIMA models to be estimated
step = 1L
# the step is one day
arima.fit = list()
for (i in 1:1000) {
arima.fit[[i]] <- auto.arima(rets[(i-step+1):(fixed.smpl+i-step)], ic=c("aicc"),
max.p=3, max.q=3,stepwise = FALSE,allowmean=TRUE)
}
# sankey diagram
import_df <- read_excel("import.xls")
export_df <- read_excel("export.xls")
################################### Libraries ###############################
library(janitor)
library(tidyr)
library(data.table)
library(dplyr)
library(lubridate)
library("readxl")
#install.packages("readxl")
#install.packages("xlsx")
library("xlsx")
export_df <- read_excel("export.xls")
################################### Project Setup ############################
setwd("~/Desktop/FIT3179-Assignment2/Datasets")
rm(list=ls())
#https://data.worldbank.org/indicator/NY.GDP.PCAP.CD?view=chart
path_to_write <- "~/Desktop/FIT3179-Assignment2/Cleaned_Datasets/"
# sankey diagram
import_df <- read_excel("import.xls")
# sankey diagram
import_df <- read_excel("import.xlsx")
export_df <- read_excel("export.xlsx")
# sankey diagram
import_df <- read.csv("import.xlsx")
export_df <- read.csv("export.xlsx")
# sankey diagram
import_df <- read.csv("import.csv")
export_df <- read.csv("export.csv")
import_df <- import_df %>% na.omit(import_df)
export_df <- export_df %>% na.omit(export_df)
import_df <- select(import_df, -c(7:31))
export_df <- select(export_df, -c(5, 6, 8))
# sankey diagram
import_df <- read.csv("import.csv")
export_df <- read.csv("export.csv")
import_df <- import_df %>% na.omit(import_df)
export_df <- export_df %>% na.omit(export_df)
import_df <- select(import_df, -c(5, 7:31))
export_df <- select(export_df, -c(5, 6, 8))
View(import_df)
colnames(export_df)[5] = "value"
colnames(import_df)[5] = "value"
colnames(export_df)[1] = "from"
colnames(import_df)[2] = "from"
colnames(export_df)[2] = "to"
colnames(import_df)[1] = "to"
colnames(import_df)[4] = "trade_type"
colnames(export_df)[4] = "trade_type"
merge(import_df, export_df, by="Year")
nrow(merge(import_df, export_df, by="Year"))
nrow(merge(import_df, export_df, by=NULL))
View(export_df)
rbind(export_df, import_df)
nrow(rbind(export_df, import_df))
both_df = rbind(export_df, import_df)
View(both_df)
both_df = rbind(export_df, import_df)
write.csv(both_df, paste(path_to_write, "trade.csv"), row.names = FALSE)
